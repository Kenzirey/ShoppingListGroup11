import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:shopping_list_g11/widget/search_bar.dart';
import '../models/product.dart';
import '../data/measurement_type.dart';

/// Screen that shows the purchase history of the user.
/// Allows user to add a new product with price, amount and date.
class PurchaseHistoryScreen extends StatefulWidget {
  const PurchaseHistoryScreen({super.key});

  @override
  State<PurchaseHistoryScreen> createState() => _PurchaseHistoryScreenState();
}

class _PurchaseHistoryScreenState extends State<PurchaseHistoryScreen> {
  // Dummy data, the id will be autogenerated in supabase and such anyways.
  final List<Product> products = [
    Product.fromName(
        name: 'Apples',
        purchaseDate: DateTime(2025, 3, 1),
        price: '2',
        amount: '3'),
    Product.fromName(
        name: 'Milk',
        purchaseDate: DateTime(2025, 3, 3),
        price: '40',
        amount: '2.5'),
    Product.fromName(
        name: 'Eggs',
        purchaseDate: DateTime(2025, 2, 25),
        price: '59',
        amount: '12'),
    Product.fromName(
        name: 'Bread',
        purchaseDate: DateTime(2025, 2, 28),
        price: '45.5',
        amount: '1'),
    Product.fromName(
        name: 'Cheese',
        purchaseDate: DateTime(2025, 1, 15),
        price: '299',
        amount: '300'),
    Product.fromName(
        name: 'Banana',
        purchaseDate: DateTime(2025, 3, 4),
        price: '5',
        amount: '5'),
    Product.fromName(
        name: 'Energy Drink',
        purchaseDate: DateTime(2025, 3, 1),
        price: '28',
        amount: '1.5'),
    Product.fromName(
        name: 'Cookies',
        purchaseDate: DateTime(2025, 3, 1),
        price: '40',
        amount: '50'),
    Product.fromName(
        name: 'Cheese',
        purchaseDate: DateTime(2025, 3, 1),
        price: '400',
        amount: '400'),
  ];
// highlight text, then control alt down/up to edit multiple lines.
  late String selectedMonth;

  @override
  void initState() {
    super.initState();
    selectedMonth = DateFormat('MMMM yyyy').format(DateTime.now());
  }

  /// Returns all the unique months in the purchase history.
  Set<String> getAvailableMonths() {
    final Set<String> months = products
        .map((product) => DateFormat('MMMM yyyy')
            .format(product.purchaseDate)) // use your actual field here
        .toSet();

    final currentMonth = DateFormat('MMMM yyyy').format(DateTime.now());
    months.add(currentMonth);

    return months;
  }

  /// Filters products to only those matching [selectedMonth].
  List<Product> getProductsForSelectedMonth() {
    return products.where((product) {
      final productMonth = DateFormat('MMMM yyyy').format(product.purchaseDate);
      return productMonth == selectedMonth;
    }).toList();
  }

  /// Groups products by day ("dd MMM, yyyy").
  Map<String, List<Product>> groupProductsByDay(List<Product> prods) {
    final Map<String, List<Product>> grouped = {};
    final dayFormat = DateFormat('dd MMM, yyyy');

    for (final product in prods) {
      final dayKey = dayFormat.format(product.purchaseDate);
      grouped.putIfAbsent(dayKey, () => []).add(product);
    }
    return grouped;
  }

  /// Let user pick date, then prompt for price & amount, then create new product.
  /// TODO: refactor to have this in controller etc
  Future<void> handleAddItem(String itemName) async {
    final chosenDate = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2020),
      lastDate: DateTime(2030),
    );
    if (chosenDate == null) return; // if user canceled, then return out

    final userInputs = await showDialog<Map<String, String>>(
      //TODO: fix this stinky context code.
      context: context,
      builder: (ctx) {
        String enteredPrice = '';
        String enteredAmount = '';

        // The dialog for altering the price and amount of a new product.
        return AlertDialog(
          backgroundColor: Theme.of(ctx).colorScheme.surface,
          title: Text(
            'Enter Price & Amount',
            style: TextStyle(
              color: Theme.of(ctx).colorScheme.tertiary,
              fontSize: 16,
              fontWeight: FontWeight.w600,
            ),
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                style: TextStyle(color: Theme.of(ctx).colorScheme.tertiary),
                keyboardType: TextInputType.number,
                decoration: InputDecoration(
                  labelText: 'Price (kr)',
                  labelStyle:
                      TextStyle(color: Theme.of(ctx).colorScheme.tertiary),
                  hintText: 'e.g. 49.99',
                  hintStyle: TextStyle(
                    color: Theme.of(ctx).colorScheme.tertiary.withOpacity(0.6),
                  ),
                  enabledBorder: UnderlineInputBorder(
                    borderSide: BorderSide(
                      color: Theme.of(ctx).colorScheme.tertiary,
                    ),
                  ),
                  focusedBorder: UnderlineInputBorder(
                    borderSide: BorderSide(
                      color: Theme.of(ctx).colorScheme.tertiary,
                      width: 2,
                    ),
                  ),
                ),
                onChanged: (val) => enteredPrice = val,
              ),
              const SizedBox(height: 12),
              // AMOUNT
              TextField(
                style: TextStyle(color: Theme.of(ctx).colorScheme.tertiary),
                keyboardType: TextInputType.number,
                decoration: InputDecoration(
                  labelText: 'Amount',
                  labelStyle:
                      TextStyle(color: Theme.of(ctx).colorScheme.tertiary),
                  hintText: 'e.g. 2.5',
                  hintStyle: TextStyle(
                    color: Theme.of(ctx).colorScheme.tertiary.withOpacity(0.6),
                  ),
                  enabledBorder: UnderlineInputBorder(
                    borderSide: BorderSide(
                      color: Theme.of(ctx).colorScheme.tertiary,
                    ),
                  ),
                  focusedBorder: UnderlineInputBorder(
                    borderSide: BorderSide(
                      color: Theme.of(ctx).colorScheme.tertiary,
                      width: 2,
                    ),
                  ),
                ),
                onChanged: (val) => enteredAmount = val,
              ),
            ],
          ),
          actions: [
            TextButton(
              style: TextButton.styleFrom(
                foregroundColor: Theme.of(ctx).colorScheme.tertiary,
              ),
              onPressed: () => Navigator.of(ctx).pop(null),
              child: const Text('Cancel'),
            ),
            TextButton(
              style: TextButton.styleFrom(
                foregroundColor: Theme.of(ctx).colorScheme.tertiary,
              ),
              onPressed: () {
                Navigator.of(ctx).pop({
                  'price': enteredPrice,
                  'amount': enteredAmount,
                });
              },
              child: const Text('OK'),
            ),
          ],
        );
      },
    );

    if (userInputs == null) return;
    final price = userInputs['price'] ?? '';
    final amount = userInputs['amount'] ?? '';
    if (price.isEmpty || amount.isEmpty) return;

    // Refactor these products to their own file / service / provider.
    final newProduct = Product.fromName(
      name: itemName,
      purchaseDate: chosenDate,
      price: price,
      amount: amount,
    );

    setState(() {
      products.add(newProduct);
    });
  }

  @override
  Widget build(BuildContext context) {
    final monthProducts = getProductsForSelectedMonth();
    // purchase date also descending
    monthProducts.sort((a, b) => b.purchaseDate.compareTo(a.purchaseDate));

    // group the days together
    final groupedByDay = groupProductsByDay(monthProducts);

    // Sort the day headers in descending orders, there has to be a simpler way? investigate
    final dayFormat = DateFormat('dd MMM, yyyy');
    final sortedDayKeys = groupedByDay.keys.toList()
      ..sort((a, b) {
        final dateA = dayFormat.parse(a);
        final dateB = dayFormat.parse(b);
        return dateB.compareTo(dateA);
      });

    // suggestions from the measurement type mapping.
    final mapSuggestions = groceryMapping.keys.toList()..sort();

    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // search bar at the very top, reusable widget
            CustomSearchBarWidget(
              suggestions: mapSuggestions,
              onSuggestionSelected: (itemName) => handleAddItem(itemName),
              hintText: 'Add product to purchase history...',
            ),
            const SizedBox(height: 16),

            // Purchase history title + dropdown for month selection.
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  "Purchase History",
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.w600,
                    color: Theme.of(context).colorScheme.tertiary,
                  ),
                ),
                DropdownButton<String>(
                  value: selectedMonth,
                  style: TextStyle(
                    color: Theme.of(context).colorScheme.tertiary,
                    fontSize: 20,
                    fontWeight: FontWeight.w600,
                  ),
                  dropdownColor: Theme.of(context).colorScheme.surface,
                  items: getAvailableMonths().map((month) {
                    return DropdownMenuItem<String>(
                      value: month,
                      child: Text(
                        month,
                        style: TextStyle(
                          color: Theme.of(context).colorScheme.tertiary,
                        ),
                      ),
                    );
                  }).toList(),
                  onChanged: (newMonth) {
                    if (newMonth != null) {
                      setState(() {
                        selectedMonth = newMonth;
                      });
                    }
                  },
                ),
              ],
            ),
            const Divider(),

            Expanded(
              child: monthProducts.isEmpty
                  ? Center(
                      child: Text(
                        "No items added yet for this month",
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                          color: Theme.of(context).colorScheme.tertiary,
                        ),
                      ),
                    )
                  : ListView.builder(
                      itemCount: sortedDayKeys.length,
                      itemBuilder: (context, index) {
                        final dayKey = sortedDayKeys[index];
                        final dayProducts = groupedByDay[dayKey] ?? [];

                        return Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Padding(
                              padding:
                                  const EdgeInsets.symmetric(vertical: 8.0),
                              child: Text(
                                dayKey,
                                style: TextStyle(
                                  fontSize: 20,
                                  fontWeight: FontWeight.bold,
                                  color: Theme.of(context).colorScheme.tertiary,
                                ),
                              ),
                            ),
                            ...dayProducts.map((product) {
                              final unitLabel =
                                  getUnitLabel(product.measurementType);
                              return Container(
                                margin: const EdgeInsets.only(bottom: 12),
                                padding: const EdgeInsets.symmetric(
                                  vertical: 8,
                                  horizontal: 12,
                                ),
                                decoration: BoxDecoration(
                                  color: Theme.of(context)
                                      .colorScheme
                                      .primaryContainer,
                                  borderRadius: BorderRadius.circular(8),
                                ),
                                child: Row(
                                  children: [
                                    Icon(
                                      Icons.local_grocery_store,
                                      size: 20,
                                      color: Theme.of(context)
                                          .colorScheme
                                          .tertiary,
                                    ),
                                    const SizedBox(width: 16),
                                    Expanded(
                                      child: Column(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.start,
                                        children: [
                                          Text(
                                            product.name,
                                            style: TextStyle(
                                              fontSize: 16,
                                              fontWeight: FontWeight.w600,
                                              color: Theme.of(context)
                                                  .colorScheme
                                                  .tertiary,
                                            ),
                                          ),
                                          const SizedBox(height: 4),
                                          Text(
                                            'Amount: ${product.amount} $unitLabel',
                                            style: TextStyle(
                                              fontSize: 14,
                                              fontWeight: FontWeight.w400,
                                              color: Theme.of(context)
                                                  .colorScheme
                                                  .tertiary,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                    Text(
                                      '${product.price} kr',
                                      style: TextStyle(
                                        fontSize: 16,
                                        fontWeight: FontWeight.w500,
                                        color: Theme.of(context)
                                            .colorScheme
                                            .tertiary,
                                      ),
                                    ),
                                  ],
                                ),
                              );
                            }),
                          ],
                        );
                      },
                    ),
            ),
          ],
        ),
      ),
    );
  }
}
